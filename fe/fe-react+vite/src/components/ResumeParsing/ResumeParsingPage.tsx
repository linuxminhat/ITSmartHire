// src/components/ResumeParsing/ResumeParsingPage.tsx
import React, { useState, useContext } from 'react'
import { ResumeProvider, ResumeContext } from '../../contexts/ResumeContext'
import Toolbar from './Toolbar'
import UploadSection from './UploadSection'
import DataTable from './DataTable'
import FileListModal from './FileListModal'
import { callUploadAndParseCVs, saveParseList } from '@/services/resumeParsing.service'
import { unparse } from 'papaparse'
import { CloudArrowUpIcon, SparklesIcon, ArrowDownTrayIcon, ArrowPathIcon } from '@heroicons/react/24/outline'
import * as XLSX from 'xlsx'
import SaveModal from './SaveModal'
import { Tooltip } from 'react-tooltip'

const Inner: React.FC = () => {
    const { files, setFiles, setParsed, parsed } = useContext(ResumeContext)
    const [showFileList, setShowFileList] = useState(false)
    const [isLoading, setIsLoading] = useState(false)
    const [error, setError] = useState<string | null>(null)
    const [searchTerm, setSearchTerm] = useState('')
    const [showSaveModal, setShowSaveModal] = useState(false)

    // H√†m xu·∫•t CSV v·ªõi BOM ƒë·ªÉ h·ªó tr·ª£ ti·∫øng Vi·ªát
    const handleExportCSV = () => {
        if (!parsed.length) return;
        const data = parsed.map(item => ({
            'H·ªç v√† t√™n': item.name || '',
            'Email': item.email || '',
            'GitHub': item.github || '',
            'ƒê·ªãa ch·ªâ': item.location || '',
            'ƒêi·ªán tho·∫°i': item.phone || '',
            'Tr∆∞·ªùng': item.university || '',
            'B·∫±ng c·∫•p': item.degree || '',
            'ƒêi·ªÉm GPA': item.gpa || '',
            'Kinh nghi·ªám l√†m vi·ªác': item.workExperiences?.map(exp =>
                `${exp.company} - ${exp.position} (${exp.duration})`
            ).join('; ') || '',
            'D·ª± √°n': item.projects?.map(proj =>
                `${proj.name}: ${proj.description.join(', ')}`
            ).join('; ') || '',
            'K·ªπ nƒÉng': item.skills?.join(', ') || '',
            'Ch·ª©ng ch·ªâ': item.certifications?.join(', ') || '',
            'NƒÉm kinh nghi·ªám': item.totalExperienceYears ? `${item.totalExperienceYears} nƒÉm` : '',
            'Ngo·∫°i ng·ªØ': item.languages?.join('; ') || '',
            'Gi·∫£i th∆∞·ªüng': item.awards?.join('; ') || ''
        }));

        // Th√™m BOM v√† config ƒë·ªÉ h·ªó tr·ª£ Unicode
        const csv = '\ufeff' + unparse(data, {
            quotes: true,
            delimiter: ','
        });

        const blob = new Blob([csv], { type: 'text/csv;charset=utf-8' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `cv_data_${new Date().toISOString().slice(0, 10)}.csv`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    };

    // Th√™m h√†m xu·∫•t Excel
    const handleExportExcel = () => {
        if (!parsed.length) return;

        // ƒê·ªãnh nghƒ©a c√°c c·ªôt v√† ƒë·ªô r·ªông
        const columns = [
            { header: 'H·ªç v√† t√™n', key: 'name', width: 20 },
            { header: 'Email', key: 'email', width: 30 },
            { header: 'GitHub', key: 'github', width: 25 },
            { header: 'ƒê·ªãa ch·ªâ', key: 'location', width: 25 },
            { header: 'ƒêi·ªán tho·∫°i', key: 'phone', width: 15 },
            { header: 'Tr∆∞·ªùng', key: 'university', width: 30 },
            { header: 'B·∫±ng c·∫•p', key: 'degree', width: 20 },
            { header: 'ƒêi·ªÉm GPA', key: 'gpa', width: 10 },
            { header: 'Kinh nghi·ªám l√†m vi·ªác', key: 'workExperiences', width: 50 },
            { header: 'D·ª± √°n', key: 'projects', width: 50 },
            { header: 'K·ªπ nƒÉng', key: 'skills', width: 40 },
            { header: 'Ch·ª©ng ch·ªâ', key: 'certifications', width: 30 },
            { header: 'NƒÉm kinh nghi·ªám', key: 'totalExperienceYears', width: 15 },
            { header: 'Ngo·∫°i ng·ªØ', key: 'languages', width: 30 },
            { header: 'Gi·∫£i th∆∞·ªüng', key: 'awards', width: 30 },
            { header: 'Ch·ª©c danh', key: 'designations', width: 30 }
        ];

        // T·∫°o d·ªØ li·ªáu cho Excel
        const data = parsed.map(item => ({
            'H·ªç v√† t√™n': item.name || '',
            'Email': item.email || '',
            'GitHub': item.github || '',
            'ƒê·ªãa ch·ªâ': item.location || '',
            'ƒêi·ªán tho·∫°i': item.phone || '',
            'Tr∆∞·ªùng': item.university || '',
            'B·∫±ng c·∫•p': item.degree || '',
            'ƒêi·ªÉm GPA': item.gpa || '',
            'Kinh nghi·ªám l√†m vi·ªác': item.workExperiences?.map(exp =>
                `${exp.company} - ${exp.position} (${exp.duration})`
            ).join('\n') || '',
            'D·ª± √°n': item.projects?.map(proj =>
                `${proj.name}: ${proj.description.join(', ')}`
            ).join('\n') || '',
            'K·ªπ nƒÉng': item.skills?.join(', ') || '',
            'Ch·ª©ng ch·ªâ': item.certifications?.join(', ') || '',
            'NƒÉm kinh nghi·ªám': item.totalExperienceYears ? `${item.totalExperienceYears} nƒÉm` : '',
            'Ngo·∫°i ng·ªØ': item.languages?.join(', ') || '',
            'Gi·∫£i th∆∞·ªüng': item.awards?.join(', ') || '',
            'Ch·ª©c danh': item.designations?.join(', ') || ''
        }));

        // T·∫°o worksheet
        const ws = XLSX.utils.json_to_sheet(data, {
            header: columns.map(col => col.header)
        });

        // Thi·∫øt l·∫≠p ƒë·ªô r·ªông c·ªôt
        ws['!cols'] = columns.map(col => ({ wch: col.width }));

        // Style cho header
        const range = XLSX.utils.decode_range(ws['!ref']);
        for (let C = range.s.c; C <= range.e.c; ++C) {
            const address = XLSX.utils.encode_col(C) + "1";
            if (!ws[address]) continue;
            ws[address].s = {
                font: { bold: true },
                fill: { fgColor: { rgb: "EFEFEF" } },
                alignment: { vertical: 'center', horizontal: 'center' }
            };
        }

        // T·∫°o workbook v√† th√™m worksheet
        const wb = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, ws, "CV Data");

        // Xu·∫•t file
        XLSX.writeFile(wb, `cv_data_${new Date().toISOString().slice(0, 10)}.xlsx`);
    };

    const handleParseAll = async () => {
        if (!files.length) return
        setIsLoading(true)
        setError(null)

        try {
            setFiles(fs => fs.map(f => ({ ...f, status: 'parsing', progress: 0 })))

            console.log('üöÄ Starting batch processing for', files.length, 'CVs...');
            console.log('‚è±Ô∏è  Estimated time:', Math.ceil(files.length / 5) * 3, 'seconds');

            const response = await callUploadAndParseCVs(files.map(f => f.file))

            if (!response.success || !response.data) {
                throw new Error('Invalid response from server');
            }

            const parsedData = Array.isArray(response.data) ? response.data : [response.data];

            // Ph√¢n t√≠ch k·∫øt qu·∫£
            const successCount = parsedData.filter(cv => cv.name || cv.email).length;
            const failCount = parsedData.length - successCount;

            console.log(`üìä Processing complete:`);
            console.log(`   ‚úÖ Success: ${successCount} CVs`);
            console.log(`   ‚ùå Failed: ${failCount} CVs`);
            console.log(`   üìà Success rate: ${((successCount / parsedData.length) * 100).toFixed(1)}%`);

            setParsed(parsedData);
            setFiles(fs => fs.map(f => ({ ...f, status: 'done', progress: 100 })))

        } catch (err) {
            console.error('Parse error:', err);
            const errorMessage = err instanceof Error ? err.message : 'C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω CV';
            setError(errorMessage);
            setFiles(fs => fs.map(f => ({ ...f, status: 'error' })));
        } finally {
            setIsLoading(false)
        }
    }

    // Th√™m h√†m reset
    const handleReset = () => {
        setFiles([]);
        setParsed([]);
        setSearchTerm('');
        setError(null);
    };

    const handleSave = async (name: string, format: 'excel' | 'csv') => {
        try {
            console.log('handleSave called with:', {
                name,
                format,
                parsedLength: parsed.length,
                parsedData: parsed.slice(0, 2) // Log first 2 items for debugging
            });

            if (!parsed.length) {
                alert('Kh√¥ng c√≥ d·ªØ li·ªáu CV ƒë·ªÉ l∆∞u!');
                return;
            }

            // G·ªçi API ƒë·ªÉ l∆∞u v√†o database
            console.log('Calling saveParseList...');
            const result = await saveParseList(name, format, parsed);
            console.log('SaveParseList result:', result);

            // Xu·∫•t file theo ƒë·ªãnh d·∫°ng ƒë√£ ch·ªçn
            if (format === 'excel') {
                handleExportExcel();
            } else {
                handleExportCSV();
            }

            alert('ƒê√£ l∆∞u danh s√°ch th√†nh c√¥ng!');
        } catch (error) {
            console.error('Error saving CV list:', error);
            const errorMessage = error instanceof Error ? error.message : 'Unknown error';
            alert(`C√≥ l·ªói x·∫£y ra khi l∆∞u danh s√°ch: ${errorMessage}`);
        }
    };

    if (error) {
        return (
            <div className="p-4 bg-red-50 border border-red-200 rounded">
                <h3 className="text-red-600 font-medium">L·ªói x·ª≠ l√Ω CV:</h3>
                <p className="text-red-700">{error}</p>
            </div>
        );
    }

    return (
        <>
            {/* Main Content Container */}
            <div className="space-y-6">
                {/* Toolbar Section */}
                <div className="bg-white rounded-lg shadow-lg p-6">
                    <div className="flex flex-col space-y-4">
                        {/* Primary Actions Row */}
                        <div className="flex items-center gap-4">
                            {/* H·ªì s∆° t·∫£i l√™n - Primary gradient button */}
                            <button
                                onClick={() => setShowFileList(true)}
                                className="flex items-center px-6 py-3 
                                    bg-gradient-to-r from-blue-600 to-blue-500
                                    hover:from-blue-700 hover:to-blue-600
                                    text-white rounded-xl shadow-md hover:shadow-lg
                                    transform transition-all duration-200 hover:-translate-y-0.5"
                            >
                                <CloudArrowUpIcon className="h-6 w-6 mr-3" />
                                <span className="font-medium">
                                    H·ªì s∆° t·∫£i l√™n
                                    <span className="ml-2 px-2 py-0.5 bg-blue-400 rounded-full text-sm">
                                        {files.length}/10
                                    </span>
                                </span>
                            </button>

                            {/* Ph√¢n t√≠ch t·∫•t c·∫£ - Accent orange button */}
                            <button
                                onClick={handleParseAll}
                                className="flex items-center px-6 py-3
                                    bg-gradient-to-r from-orange-500 to-orange-400
                                    hover:from-orange-600 hover:to-orange-500
                                    text-white rounded-xl shadow-md hover:shadow-lg
                                    transform transition-all duration-200 hover:-translate-y-0.5"
                            >
                                <SparklesIcon className="h-6 w-6 mr-3" />
                                <span className="font-medium">Ph√¢n t√≠ch t·∫•t c·∫£</span>
                            </button>

                            {/* L∆∞u t·∫•t c·∫£ - Success green button */}
                            <button
                                onClick={() => setShowSaveModal(true)}
                                className="flex items-center px-6 py-3
                                    bg-gradient-to-r from-green-500 to-green-400
                                    hover:from-green-600 hover:to-green-500
                                    text-white rounded-xl shadow-md hover:shadow-lg
                                    transform transition-all duration-200 hover:-translate-y-0.5"
                            >
                                <ArrowDownTrayIcon className="h-6 w-6 mr-3" />
                                <span className="font-medium">L∆∞u t·∫•t c·∫£</span>
                            </button>

                            {/* L√†m m·ªõi - Neutral button */}
                            <button
                                onClick={handleReset}
                                className="flex items-center px-6 py-3
                                    bg-gray-500 hover:bg-gray-600
                                    text-white rounded-xl shadow-md hover:shadow-lg
                                    transform transition-all duration-200 hover:-translate-y-0.5
                                    ml-auto"
                            >
                                <ArrowPathIcon className="h-6 w-6 mr-3" />
                                <span className="font-medium">L√†m m·ªõi</span>
                            </button>

                            {/* Export buttons */}
                            <button
                                onClick={handleExportExcel}
                                disabled={!parsed.length}
                                data-tooltip-id="export-tooltip"
                                data-tooltip-content="Xu·∫•t t·∫•t c·∫£ h·ªì s∆° ƒë√£ tr√≠ch xu·∫•t sang file Excel"
                                className={`
                                    flex items-center px-6 py-3 rounded-xl
                                    transform transition-all duration-200
                                    ${parsed.length 
                                        ? 'bg-gradient-to-r from-green-500 to-green-400 hover:from-green-600 hover:to-green-500 text-white shadow-md hover:shadow-lg hover:-translate-y-0.5' 
                                        : 'bg-gray-100 text-gray-400 cursor-not-allowed'}
                                `}
                            >
                                <ArrowDownTrayIcon className="h-6 w-6 mr-3" />
                                <span className="font-medium">
                                    Xu·∫•t Excel
                                    <span className={`
                                        ml-2 px-2 py-0.5 rounded-full text-sm
                                        ${parsed.length 
                                            ? 'bg-green-400 text-white' 
                                            : 'bg-gray-200 text-gray-500'}
                                    `}>
                                        {parsed.length}/100
                                    </span>
                                </span>
                            </button>

                            <button
                                onClick={handleExportCSV}
                                disabled={!parsed.length}
                                data-tooltip-id="export-tooltip"
                                data-tooltip-content="Xu·∫•t t·∫•t c·∫£ h·ªì s∆° ƒë√£ tr√≠ch xu·∫•t sang file CSV"
                                className={`
                                    flex items-center px-6 py-3 rounded-xl
                                    transform transition-all duration-200
                                    ${parsed.length 
                                        ? 'bg-gradient-to-r from-green-500 to-green-400 hover:from-green-600 hover:to-green-500 text-white shadow-md hover:shadow-lg hover:-translate-y-0.5' 
                                        : 'bg-gray-100 text-gray-400 cursor-not-allowed'}
                                `}
                            >
                                <ArrowDownTrayIcon className="h-6 w-6 mr-3" />
                                <span className="font-medium">
                                    Xu·∫•t CSV
                                    <span className={`
                                        ml-2 px-2 py-0.5 rounded-full text-sm
                                        ${parsed.length 
                                            ? 'bg-green-400 text-white' 
                                            : 'bg-gray-200 text-gray-500'}
                                    `}>
                                        {parsed.length}/100
                                    </span>
                                </span>
                            </button>
                        </div>

                        {/* Search bar */}
                        <div className="flex items-center">
                            <input
                                type="text"
                                value={searchTerm}
                                onChange={(e) => setSearchTerm(e.target.value)}
                                placeholder="üîç T√¨m theo t√™n ho·∫∑c email"
                                className="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                            />
                        </div>
                    </div>
                </div>

                {/* Upload Section - LU√îN HI·ªÇN TH·ªä, kh√¥ng c√≤n ƒëi·ªÅu ki·ªán files.length === 0 */}
                <div className="bg-white rounded-lg shadow">
                    <UploadSection />
                </div>

                {/* Data Table */}
                <div className="bg-white rounded-lg shadow">
                    <DataTable searchTerm={searchTerm} />
                </div>
            </div>

            {showFileList && <FileListModal onClose={() => setShowFileList(false)} />}
            {showSaveModal && (
                <SaveModal
                    onClose={() => setShowSaveModal(false)}
                    onSave={handleSave}
                />
            )}

            {/* Tooltip Component */}
            <Tooltip
                id="export-tooltip"
                className="z-50 !bg-gray-800 !px-3 !py-2"
                place="top"
            />
        </>
    )
}

const ResumeParsingPage: React.FC = () => (
    <ResumeProvider>
        <div className="p-6 min-h-screen bg-gray-100">
            <Inner />
        </div>
    </ResumeProvider>
)

export default ResumeParsingPage
