import React, { Fragment, useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { Menu, Transition } from '@headlessui/react';
import { useAuthActions } from '@/contexts/AuthActionContext';
import { useAuth } from '@/contexts/AuthContext';
import {
  UserCircleIcon,
  ArrowRightOnRectangleIcon,
  Cog6ToothIcon,
  SunIcon,
  MoonIcon,
  CloudIcon,
  SparklesIcon
} from '@heroicons/react/24/outline';

const Header: React.FC = () => {
  const { handleLogout } = useAuthActions();
  const { user } = useAuth();
  const [greeting, setGreeting] = useState('');
  const [greetingEmoji, setGreetingEmoji] = useState('');
  const [greetingIcon, setGreetingIcon] = useState<React.ComponentType<any> | null>(null);
  const [inspirationalMessage, setInspirationalMessage] = useState('');

  useEffect(() => {
    const hour = new Date().getHours();
    const dayOfWeek = new Date().getDay();
    
    // Set greeting based on time
    if (hour < 12) {
      setGreeting('Ch√†o bu·ªïi s√°ng');
      setGreetingEmoji('üåÖ');
      setGreetingIcon(SunIcon);
    } else if (hour < 18) {
      setGreeting('Ch√†o bu·ªïi chi·ªÅu');
      setGreetingEmoji('‚òÄÔ∏è');
      setGreetingIcon(CloudIcon);
    } else {
      setGreeting('Ch√†o bu·ªïi t·ªëi');
      setGreetingEmoji('üåÜ');
      setGreetingIcon(MoonIcon);
    }

    // Set inspirational message based on role and day
    const messages = {
      ADMIN: [
        'H√£y d·∫´n d·∫Øt ƒë·ªôi ng≈© ƒë·∫°t ƒë∆∞·ª£c nh·ªØng th√†nh t·ª±u tuy·ªát v·ªùi!',
        'M·ªôt ng√†y m·ªõi, nh·ªØng c∆° h·ªôi m·ªõi ƒë·ªÉ ph√°t tri·ªÉn c√¥ng ty!',
        'Qu·∫£n l√Ω hi·ªáu qu·∫£ l√† ch√¨a kh√≥a th√†nh c√¥ng!',
        'H√¥m nay h√£y t·∫°o ra nh·ªØng quy·∫øt ƒë·ªãnh s√°ng su·ªët!'
      ],
      HR: [
        'H√£y t√¨m ki·∫øm nh·ªØng t√†i nƒÉng xu·∫•t s·∫Øc nh·∫•t!',
        'M·ªói ·ª©ng vi√™n ƒë·ªÅu l√† m·ªôt c∆° h·ªôi ƒë·ªÉ x√¢y d·ª±ng ƒë·ªôi ng≈© m·∫°nh m·∫Ω!',
        'H√¥m nay h√£y k·∫øt n·ªëi v·ªõi nh·ªØng t√†i nƒÉng ti·ªÅm nƒÉng!',
        'X√¢y d·ª±ng vƒÉn h√≥a c√¥ng ty t√≠ch c·ª±c b·∫Øt ƒë·∫ßu t·ª´ b·∫°n!',
        'Ch√∫c b·∫°n m·ªôt ng√†y tuy·ªÉn d·ª•ng hi·ªáu qu·∫£!'
      ]
    };

    const roleMessages = messages[user?.role?.name as keyof typeof messages] || messages.HR;
    const randomMessage = roleMessages[Math.floor(Math.random() * roleMessages.length)];
    setInspirationalMessage(randomMessage);

  }, [user?.role?.name]);

  const isHR = user?.role?.name === 'HR';
  const isAdmin = user?.role?.name === 'ADMIN';
  const basePath = user?.role?.name === 'ADMIN' ? '/admin' : user?.role?.name === 'HR' ? '/hr' : '/';

  const getRoleDisplayName = () => {
    if (isAdmin) return 'Admin';
    if (isHR) return user?.company?.name ? `HR c√¥ng ty ${user.company.name}` : 'HR';
    return user?.name || 'User';
  };

  const IconComponent = greetingIcon;

  return (
    <header className="bg-white shadow-sm py-3 px-6 flex justify-between items-center">
      {/* Enhanced Greeting Card */}
      <div className="flex-1 mr-4">
        <div className="bg-gradient-to-r from-blue-50 via-purple-50 to-pink-50 rounded-xl p-4 border border-blue-100 shadow-sm hover:shadow-md transition-all duration-300">
          <div className="flex items-center space-x-3">
            {/* Icon v√† Emoji */}
            <div className="flex items-center space-x-2">
              {IconComponent && (
                <IconComponent className="h-6 w-6 text-blue-500" />
              )}
              <span className="text-2xl">{greetingEmoji}</span>
            </div>
            
            {/* Main Greeting */}
            <div className="flex-1">
              <div className="flex items-center space-x-2">
                <h2 className="text-lg font-bold text-gray-800">
                  {greeting}, {getRoleDisplayName()}
                </h2>
                {(isHR || isAdmin) && <SparklesIcon className="h-5 w-5 text-amber-500" />}
              </div>
              
              {/* Inspirational Message */}
              <p className="text-sm text-gray-600 mt-1 flex items-center">
                <span className="mr-2">üí™</span>
                {inspirationalMessage}
              </p>
              
              {/* Role Badge */}
              {(isHR || isAdmin) && (
                <div className="mt-2 flex items-center space-x-2">
                  <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                    isAdmin 
                      ? 'bg-purple-100 text-purple-800' 
                      : 'bg-green-100 text-green-800'
                  }`}>
                    {isAdmin ? 'üëë Administrator' : 'üè¢ Human Resources'}
                  </span>
                  
                  {/* Weather-like status */}
                  <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                    <span className="mr-1">üöÄ</span>
                    S·∫µn s√†ng l√†m vi·ªác
                  </span>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>

      <div className="flex items-center">
        {/* User Menu */}
        <Menu as="div" className="relative ml-3">
          <Menu.Button className="flex rounded-full bg-white focus:outline-none hover:bg-gray-50 transition-colors duration-200">
            <span className="sr-only">Open user menu</span>
            <div className="h-10 w-10 rounded-full bg-gradient-to-br from-blue-500 to-purple-600 text-white flex items-center justify-center hover:from-blue-600 hover:to-purple-700 transition-all duration-200 shadow-lg">
              {user?.name ? (
                <span className="text-sm font-semibold">
                  {user.name.split(' ').map(n => n[0]).join('').toUpperCase().slice(0, 2)}
                </span>
              ) : (
                <UserCircleIcon className="h-6 w-6" />
              )}
            </div>
          </Menu.Button>

          <Transition
            as={Fragment}
            enter="transition ease-out duration-100"
            enterFrom="transform opacity-0 scale-95"
            enterTo="transform opacity-100 scale-100"
            leave="transition ease-in duration-75"
            leaveFrom="transform opacity-100 scale-100"
            leaveTo="transform opacity-0 scale-95"
          >
            <Menu.Items className="absolute right-0 z-10 mt-2 w-56 origin-top-right rounded-lg bg-white py-2 shadow-xl ring-1 ring-black ring-opacity-5 focus:outline-none border border-gray-100">
              {/* User Info Header */}
              <div className="px-4 py-3 border-b border-gray-100">
                <p className="text-sm font-medium text-gray-900">{user?.name || 'User'}</p>
                <p className="text-xs text-gray-500">{user?.email}</p>
                <span className={`inline-block mt-1 px-2 py-0.5 rounded-full text-xs font-medium ${
                  isAdmin 
                    ? 'bg-purple-100 text-purple-700' 
                    : 'bg-green-100 text-green-700'
                }`}>
                  {user?.role?.name || 'User'}
                </span>
              </div>

              <Menu.Item>
                {({ active }) => (
                  <Link
                    to={`${basePath}/profile`}
                    className={`${active ? 'bg-blue-50 text-blue-700' : 'text-gray-700'} flex items-center px-4 py-3 text-sm transition-colors duration-150`}
                  >
                    <UserCircleIcon className="h-5 w-5 mr-3 text-gray-400" />
                    H·ªì s∆° c·ªßa t√¥i
                  </Link>
                )}
              </Menu.Item>
              <Menu.Item>
                {({ active }) => (
                  <Link
                    to="#"
                    className={`${active ? 'bg-blue-50 text-blue-700' : 'text-gray-700'} flex items-center px-4 py-3 text-sm transition-colors duration-150`}
                  >
                    <Cog6ToothIcon className="h-5 w-5 mr-3 text-gray-400" />
                    C√†i ƒë·∫∑t
                  </Link>
                )}
              </Menu.Item>
              <Menu.Item>
                {({ active }) => (
                  <button
                    onClick={handleLogout}
                    className={`${active ? 'bg-red-50 text-red-700' : 'text-gray-700'} flex w-full items-center px-4 py-3 text-sm transition-colors duration-150`}
                  >
                    <ArrowRightOnRectangleIcon className="h-5 w-5 mr-3 text-gray-400" />
                    ƒêƒÉng xu·∫•t
                  </button>
                )}
              </Menu.Item>
            </Menu.Items>
          </Transition>
        </Menu>
      </div>
    </header>
  );
};

export default Header;